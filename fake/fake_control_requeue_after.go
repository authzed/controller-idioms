// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"
	"time"

	"github.com/authzed/ktrllib"
)

type FakeControlRequeueAfter struct {
	RequeueAfterStub        func(time.Duration)
	requeueAfterMutex       sync.RWMutex
	requeueAfterArgsForCall []struct {
		arg1 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeControlRequeueAfter) RequeueAfter(arg1 time.Duration) {
	fake.requeueAfterMutex.Lock()
	fake.requeueAfterArgsForCall = append(fake.requeueAfterArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.RequeueAfterStub
	fake.recordInvocation("RequeueAfter", []interface{}{arg1})
	fake.requeueAfterMutex.Unlock()
	if stub != nil {
		fake.RequeueAfterStub(arg1)
	}
}

func (fake *FakeControlRequeueAfter) RequeueAfterCallCount() int {
	fake.requeueAfterMutex.RLock()
	defer fake.requeueAfterMutex.RUnlock()
	return len(fake.requeueAfterArgsForCall)
}

func (fake *FakeControlRequeueAfter) RequeueAfterCalls(stub func(time.Duration)) {
	fake.requeueAfterMutex.Lock()
	defer fake.requeueAfterMutex.Unlock()
	fake.RequeueAfterStub = stub
}

func (fake *FakeControlRequeueAfter) RequeueAfterArgsForCall(i int) time.Duration {
	fake.requeueAfterMutex.RLock()
	defer fake.requeueAfterMutex.RUnlock()
	argsForCall := fake.requeueAfterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeControlRequeueAfter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.requeueAfterMutex.RLock()
	defer fake.requeueAfterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeControlRequeueAfter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ libctrl.ControlRequeueAfter = new(FakeControlRequeueAfter)
